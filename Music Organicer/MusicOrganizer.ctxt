#BlueJ class context
comment0.params=folderName
comment0.target=MusicOrganizer(java.lang.String)
comment0.text=\r\n\ Create\ a\ MusicOrganizer.\r\n\ @param\ folderName\ The\ folder\ of\ audio\ files.\r\n
comment1.params=filename
comment1.target=void\ addFile(java.lang.String)
comment1.text=\r\n\ Add\ a\ track\ file\ to\ the\ collection.\r\n\ @param\ filename\ The\ file\ name\ of\ the\ track\ to\ be\ added.\r\n
comment10.params=t1\ t2
comment10.target=int\ compare(Track,\ Track)
comment11.params=index
comment11.target=void\ removeTrack(int)
comment11.text=\r\n\ Remove\ a\ track\ from\ the\ collection.\r\n\ @param\ index\ The\ index\ of\ the\ track\ to\ be\ removed.\r\n
comment12.params=index
comment12.target=boolean\ indexValid(int)
comment12.text=\r\n\ Determine\ whether\ the\ given\ index\ is\ valid\ for\ the\ collection.\r\n\ Print\ an\ error\ message\ if\ it\ is\ not.\r\n\ @param\ index\ The\ index\ to\ be\ checked.\r\n\ @return\ true\ if\ the\ index\ is\ valid,\ false\ otherwise.\r\n
comment13.params=folderName
comment13.target=void\ readLibrary(java.lang.String)
comment2.params=track
comment2.target=void\ addTrack(Track)
comment2.text=\r\n\ Add\ a\ track\ to\ the\ collection.\r\n\ @param\ track\ The\ track\ to\ be\ added.\r\n
comment3.params=index
comment3.target=Track\ getTrack(int)
comment3.text=\r\n\ Get\ a\ track\ from\ the\ collection.\r\n\ @param\ index\ The\ index\ of\ the\ track.\r\n\ @return\ The\ selected\ track,\ or\ null\ if\ it\ does\ not\ exist.\r\n
comment4.params=
comment4.target=int\ getNumberOfTracks()
comment4.text=\r\n\ Return\ the\ number\ of\ tracks\ in\ the\ collection.\r\n\ @return\ The\ number\ of\ tracks\ in\ the\ collection.\r\n
comment5.params=
comment5.target=java.util.List\ getAllTracks()
comment5.text=\r\n\ Return\ a\ copy\ of\ all\ the\ tracks\ in\ the\ collection.\r\n\ @return\ All\ the\ tracks\ in\ the\ collection.\r\n
comment6.params=
comment6.target=java.util.List\ sortByArtist()
comment6.text=\r\n\ Return\ a\ list\ of\ the\ tracks,\ sorted\ by\ artist.\r\n\ @return\ The\ tracks,\ sorted\ by\ artist.\r\n
comment7.params=
comment7.target=java.util.List\ sortByTitle()
comment7.text=\r\n\ Return\ a\ list\ of\ the\ tracks,\ sorted\ by\ title.\r\n\ @return\ The\ tracks,\ sorted\ by\ title.\r\n
comment8.params=comparator
comment8.target=java.util.List\ sortBy(java.util.Comparator)
comment8.text=\r\n\ Return\ a\ sorted\ copy\ of\ the\ track\ list.\r\n\ @param\ comparator\ The\ comparator\ for\ the\ sort.\r\n\ @return\ A\ sorted\ copy\ of\ the\ list.\r\n
comment9.params=field
comment9.target=java.util.List\ sortByField(java.lang.String)
comment9.text=\r\n\ Return\ a\ list\ of\ the\ tracks,\ sorted\ by\ the\ given\ field\ name.\r\n\ @param\ field\ The\ field\ to\ sort\ by;\ e.g.,\ Artist,\ Title,\ etc.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ @see\ Track.FIELDS\r\n\ @return\ The\ tracks,\ sorted\ by\ the\ field.\r\n
numComments=14
